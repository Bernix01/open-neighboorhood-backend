name: Django CI

on:
  push:
    on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    # Similar to docker-compose.yml but not the same, ü§∑‚Äç‚ôÇÔ∏è
    services:
      postgres:
        image: postgres:11.6-alpine
        env:
          POSTGRES_DB: neighborhood
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv sync --dev
    - name: Run Lint
      run: |
        pipenv run prospector
    - name: Run Tests
      env:
        DEBUG: 'on'
      run: |
        pipenv run python manage.py test
    - uses: actions/checkout@v2
      with:
        repository: 'bernix01/open-neighborhood'
        ref: 'master'
        path: 'frontend'
    - name: Build frontend
      env:
        NODE_ENV: development
      run: |
        npm install
        npm run build
      working-directory: frontend
    - name: Copy front dist and collecting statics
      run: |
        mv ./frontend/build ./build
        rm -rf ./frontend
        pipenv run python manage.py collectstatic --noinput
    - name: Login to Heroku Container registry
      env: 
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: heroku container:login 
    - name: Build and push
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: heroku container:push -a ${{ secrets.HEROKU_APP_NAME }} web 
    - name: Release
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: heroku container:release -a ${{ secrets.HEROKU_APP_NAME }} web 


